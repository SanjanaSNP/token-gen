name: Send GitHub App Token Every 45 Min

on:
  schedule:
    - cron: '*/45 * * * *'  # Every 45 minutes
  workflow_dispatch:        # Manual trigger support

jobs:
  send-token:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyJWT requests

      - name: Send GitHub App Token
        env:
          APP_ID: ${{ secrets.GITHUB_APP_ID }}
          PRIVATE_KEY: ${{ secrets.GITHUB_APP_PRIVATE_KEY }}
          LOGIC_APP_URL: ${{ secrets.LOGIC_APP_URL }}
        run: |
          import os, time, jwt, requests

          app_id = os.getenv("APP_ID")
          private_key = os.getenv("PRIVATE_KEY").replace("\\n", "\n")
          logic_app_url = os.getenv("LOGIC_APP_URL")

          payload = {
              "iat": int(time.time()) - 60,
              "exp": int(time.time()) + (10 * 60),
              "iss": app_id
          }

          jwt_token = jwt.encode(payload, private_key, algorithm="RS256")

          headers = {
              "Authorization": f"Bearer {jwt_token}",
              "Accept": "application/vnd.github+json"
          }

          installations = requests.get("https://api.github.com/app/installations", headers=headers).json()
          if not installations:
              raise Exception("No installations found.")

          installation_id = installations[0]["id"]
          access_token_url = f"https://api.github.com/app/installations/{installation_id}/access_tokens"
          access_token_response = requests.post(access_token_url, headers=headers)
          access_token_response.raise_for_status()
          access_token = access_token_response.json()["token"]

          response = requests.post(logic_app_url, json={"token": access_token})
          response.raise_for_status()

          print("Token sent successfully.")
